/*
 * The client implementation is generated by the ORB Studio.
 */
import java.io.IOException;
import java.util.Properties;

import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;

class MyServiceClientImpl extends Thread {

	private int customerID;
	private MyServer.MyService target = null;

	private org.omg.CORBA.ORB orb = null;

	public MyServiceClientImpl(int customerID) throws Exception {
		if(Integer.toString(customerID).length() == 6)
			this.customerID = customerID;
		else 
			throw new Exception("Invalid customer ID.");
	}

	/**
	 * Constructor for MyServiceClientImpl
	 * 
	 * @throws IOException
	 * @throws org.omg.CosNaming.NamingContextPackage.InvalidName 
	 * @throws CannotProceed 
	 * @throws NotFound 
	 * @throws InvalidName 
	 */
	public MyServiceClientImpl() throws IOException, InvalidName, NotFound, CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {
		initORB(null);
	}

	/**
	 * Initialize ORB.
	 *  
	 * @param args
	 * @throws IOException
	 * @throws InvalidName 
	 * @throws org.omg.CosNaming.NamingContextPackage.InvalidName 
	 * @throws CannotProceed 
	 * @throws NotFound 
	 */
	public MyServer.MyService initORB(String boxOfficeName) throws IOException, InvalidName, NotFound, CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {

		Properties props = System.getProperties();
		props.setProperty("org.omg.CORBA.ORBClass", "com.sun.corba.se.internal.POA.POAORB");
		props.setProperty("org.omg.CORBA.ORBSingletonClass", "com.sun.corba.se.internal.corba.ORBSingleton");

		// Initialize the ORB
		orb = org.omg.CORBA.ORB.init(new String[1], props);

		// ---- enable Naming Service access. ----
		org.omg.CORBA.Object ncobj = orb.resolve_initial_references("NameService");
		NamingContextExt nc = NamingContextExtHelper.narrow(ncobj);
		org.omg.CORBA.Object obj = nc.resolve_str("BO_" + boxOfficeName);

		MyServer.MyService target = MyServer.MyServiceHelper.narrow(obj);		

		return target;
	}

	/**
	 * Obtain ORB Interface.
	 * 
	 * @return
	 */
	public MyServer.MyService getORBInterface() {
		return target;
	}

	/**
	 * Shutdown ORB.
	 */
	public void shutdown() {
		orb.shutdown(true);
	}


	public void process(String boxOfficeName) {
		try {
			MyServer.MyService target = initORB(boxOfficeName);
			target.initializeBoxOffice(boxOfficeName);

			try {

				System.out.println(target.printBoxOfficeRecords(customerID));

				int numberOfRequestedTickets = 3;
				int numberOfCanceledTickets = 1;
				String tabs = "\t\t\t\t\t\t\t\t";

				try {
					target.reserve(customerID, boxOfficeName + "111", numberOfRequestedTickets);
					System.out.println(tabs + "Show ID: " + boxOfficeName + "111" + ", CustomerID = " + customerID + ", Requested Tickets = " + numberOfRequestedTickets);
				} catch (Exception e) {
					//TODO
					System.out.println("Reserve Fail: " + e.getMessage());
				} 

				target.cancel(customerID, boxOfficeName + "111", numberOfCanceledTickets);
				System.out.println(tabs + "Show ID: " + boxOfficeName + "111" + ", CustomerID = " + customerID + ", Canceling Tickets = " + numberOfCanceledTickets);

				if(!boxOfficeName.equals("TOR")) {
					try {
						target.exchange(customerID, boxOfficeName + "111", numberOfCanceledTickets, "TOR" + "111", 4);
						System.out.println(tabs + "Show ID: " + "TOR" + "111" + ", CustomerID = " + customerID + ", Exchanging Tickets = " + 4);
					}  catch (Exception e) {
						System.out.println("Exchange fail: " + e.getMessage());
					} 
				}
				else {
					//TODO
					System.out.println("no exchange.. it's TOR");
				}

				/*try {			
					target.reserve(customerID, boxOfficeName + "222", numberOfRequestedTickets);
					System.out.println(tabs + "Show ID: " + boxOfficeName + "222" + ", CustomerID = " + customerID + ", Requested Tickets = " + numberOfRequestedTickets);
				} catch (Exception e) {
					System.out.println("Reserve Fail: " + e.getMessage());
				} 

				target.cancel(customerID, boxOfficeName + "222", numberOfCanceledTickets);
				System.out.println(tabs + "Show ID: " + boxOfficeName + "222" + ", CustomerID = " + customerID + ", Canceling Tickets = " + numberOfCanceledTickets);

				try {			
					target.reserve(customerID, boxOfficeName + "333", numberOfRequestedTickets);
					System.out.println(tabs + "Show ID: " + boxOfficeName + "333" + ", CustomerID = " + customerID + ", Requested Tickets = " + numberOfRequestedTickets);
				} catch (Exception e) {
					System.out.println("Reserve Fail: " + e.getMessage());
				} 

				target.cancel(customerID, boxOfficeName + "333", numberOfCanceledTickets);
				System.out.println(tabs + "Show ID: " + boxOfficeName + "333" + ", CustomerID = " + customerID + ", Canceling Tickets = " + numberOfCanceledTickets);
*/

			} catch (Exception e) {
				//TODO
				System.out.println("The Client " + customerID + " failed:\n" + e.getMessage());
			}
		} catch (Exception e) {
			//TODO
			System.out.println("The Client " + customerID + " failed:\n" + e.getMessage());
		}

		this.shutdown();
	}

	public void process() {
		//process("MTL");
		process("NYC");
		process("TOR");	
	}

	public void run() {		
		process();
	}

	/**
	 * Test driver for MyServiceClientImpl.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {

		try {

			MyServiceClientImpl c1 = new MyServiceClientImpl(111111);
			c1.start();

/*			MyServiceClientImpl c2 = new MyServiceClientImpl(222222);
			c2.start();

			MyServiceClientImpl c3 = new MyServiceClientImpl(333333);
			c3.start();

			MyServiceClientImpl c4 = new MyServiceClientImpl(444444);
			c4.start();

			MyServiceClientImpl c5 = new MyServiceClientImpl(555555);
			c5.start();
*/
			c1.join();
	/*		c2.join();
			c3.join();
			c4.join();
			c5.join();*/

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
